<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.db.project.matching.MatchingMapper">
    <!--매칭 등록-->
    <insert id="insertMatching" parameterType="hashmap">
        insert into matching(matching_deal_address, customer_seq, customer_book_seq, customer_secret_num)
        values((select customer_address from customer a join customer_book b on a.customer_seq = b.customer_seq where b.customer_book_seq = #{customer_book_seq} ), #{customer_seq}, #{customer_book_seq},#{customer_secret_num})
    </insert>

    <!--나의 매칭 목록(대출)-->
    <select id="selectBorrowMatching" parameterType="hashmap" resultType="hashmap">
        select m.matching_seq, b.book_isbn, b.book_img, b.book_name, m.matching_type,
        m.matching_endAt, m.matching_rental_yn, m.matching_borrow_yn
        from matching m, customer_book cb, book b
        where cb.book_isbn = b.book_isbn AND m.customer_book_seq = cb.customer_book_seq AND m.customer_seq = #{customer_seq}
    </select>
    <!--나의 매칭 목록(대여)-->
    <select id="selectRentalMatching" parameterType="hashmap" resultType="hashmap">
        select m.matching_seq, b.book_isbn, b.book_img, b.book_name, m.matching_type ,m.matching_endAt,
        m.matching_rental_yn, m.matching_borrow_yn
        FROM book b, matching m, customer_book cb
        WHERE m.customer_book_seq = cb.customer_book_seq AND b.book_isbn = cb.book_isbn AND cb.customer_seq = #{customer_seq}
    </select>
    <!--대여자 상태 변경-->
    <update id="updateRentalMatching" parameterType="hashmap">
        update matching set matching_rental_yn = #{matching_rental_yn}
        where matching_seq = #{matching_seq}
    </update>
    <!--대출자 상태 변경-->
    <update id="updateBorrowMatching" parameterType="hashmap">
        update matching set matching_borrow_yn = #{matching_borrow_yn}
        where matching_seq = #{matching_seq}
    </update>

    <!--매칭 상태 조회 -->
    <select id="selectMatchingState" parameterType="hashmap" resultType="hashmap">
        select * from matching
        where matching_seq = #{matching_seq}
    </select>

    <!--매칭 상태 변경-->
    <update id="updateTypeMatching" parameterType="hashmap">
        update matching set matching_type = #{matching_type}
        where matching_seq = #{matching_seq}
    </update>

    <select id="selectMatchingList" resultType="hashmap">
        SET @id1 ="부산시 사상구", @id2="부산시 부산진구", @id3 = "부산시 중구",
        @id4 = "부산시 서구",@id5 = "부산시 동구",@id6 = "부산시 영도구",
        @id7 = "부산시 동래구", @id8 = "부산시 남구", @id9 = "부산시 북구",
        @id10 = "부산시 해운대구", @id11 = "부산시 사하구", @id12 = "부산시 금정구",
        @id13 = "부산시 강서구", @id14 = "부산시 연제구", @id15 = "부산시 수영구", @id16 = "부산시 기장구";

        SELECT count(*) area, @id1 as name FROM db2020.matching
        where  matching_deal_address like concat("%",@id1,"%")
        UNION ALL
        SELECT count(*) area, @id2 as name  FROM matching
        where matching_deal_address like concat("%",@id2,"%")
        UNION ALL
        SELECT count(*) area, @id3 as name FROM matching
        where matching_deal_address like concat("%",@id3,"%")
        UNION ALL
        SELECT count(*) area, @id4 as name  FROM matching
        where matching_deal_address like concat("%",@id4,"%")
        UNION aLL
        SELECT count(*) area, @id5 as name FROM matching
        where matching_deal_address like concat("%",@id5,"%")
        UNION aLL
        SELECT count(*) area, @id6 as name  FROM matching
        where matching_deal_address like concat("%",@id6,"%")
        UNION aLL
        SELECT count(*) area, @id7 as name  FROM matching
        where matching_deal_address like concat("%",@id7,"%")
        UNION aLL
        SELECT count(*) area, @id8 as name  FROM matching
        where matching_deal_address like concat("%",@id8,"%")
        UNION aLL
        SELECT count(*) area, @id9 as name  FROM matching
        where matching_deal_address like concat("%",@id9,"%")
        UNION aLL
        SELECT count(*) area, @id10 as name  FROM matching
        where matching_deal_address like concat("%",@id10,"%")
        UNION aLL
        SELECT count(*) area, @id11 as name  FROM matching
        where matching_deal_address like concat("%",@id11,"%")
        UNION aLL
        SELECT count(*) area, @id12 as name  FROM matching
        where matching_deal_address like concat("%",@id12,"%")
        UNION aLL
        SELECT count(*) area, @id13 as name  FROM matching
        where matching_deal_address like concat("%",@id13,"%")
        UNION aLL
        SELECT count(*) area, @id14 as name  FROM matching
        where matching_deal_address like concat("%",@id14,"%")
        UNION aLL
        SELECT count(*) area, @id15 as name  FROM matching
        where matching_deal_address like concat("%",@id15,"%")
        UNION aLL
        SELECT count(*) area, @id16 as name  FROM matching
        where matching_deal_address like concat("%",@id16,"%")

    </select>
    <!-- 매칭 대출자, 대여자 상태 변경 -->
    <update id="updateMatchingReset" parameterType="hashmap">
        update matching set matching_rental_yn = 0 , matching_borrow_yn = 0
        where matching_seq = #{matching_seq}
    </update>
    <!-- 대여시 반납일자 생성-->
    <update id="updateMatchingDate" parameterType="hashmap">
        update  matching set matching_endAt = #{matching_endAt}
        where matching_seq = #{matching_seq}
    </update>
    <!-- 예약한 책 찾아오기 -->
    <select id="selectReservation" parameterType="hashmap" resultType="hashmap">
        SELECT r.reservation_seq, r.customer_book_seq, r.customer_seq, r.reservation_createAt, b.book_name, (SELECT matching_endAt FROM matching WHERE r.customer_book_seq = matching.customer_book_seq ORDER BY matching_endAt DESC LIMIT 1) AS matching_endAt
        FROM reservation r, customer_book cb, book b
        WHERE r.customer_book_seq = cb.customer_book_seq AND b.book_isbn = cb.book_isbn AND r.customer_seq = #{customer_seq} AND r.reservation_yn = 'n'
    </select>

    <!-- 예약한 책의 랭킹 찾아오기 -->
    <select id="selectRank" parameterType="hashmap" resultType="hashmap">
        <![CDATA[
        SELECT customer_seq
        ,@RANKT := IF(@LAST < reservation_createAt, @RANK := @RANK + 1, @RANK) AS rank
        ,@LAST := reservation_createAt
        FROM reservation, (SELECT @RANK := 1) XX
        WHERE customer_book_seq = #{customer_book_seq} AND reservation_yn = 'n'
        ORDER BY reservation_createAt
        ]]>
    </select>
</mapper>